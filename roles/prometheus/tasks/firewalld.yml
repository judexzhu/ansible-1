---

- name: prometheus| firewalld | create prometheus_servers ipset
  include_role:
    name: firewalld
    tasks_from: ipset
  vars:
    ipset_name: prometheus_servers
    ipset_description: "Prometheus servers allowed to scrape node stats"
    ipset_entries: "{{ groups['prometheus_servers']}}"
  tags:
    - prometheus
    - firewalld


- name: prometheus| firewalld | create prometheus_alertmanagers ipset
  include_role:
    name: firewalld
    tasks_from: ipset
  when: "prometheus_alertmanager"
  vars:
    ipset_name: prometheus_alertmanagers
    ipset_description: "Prometheus alertmanager nodes"
    ipset_entries: "{{ groups['prometheus_alertmanagers']}}"
  tags:
    - prometheus
    - alertmanager
    - firewalld

- name: prometheus| firewalld | create grafana_servers ipset
  include_role:
    name: firewalld
    tasks_from: ipset
  when: "groups.get('grafana_servers',[])| length"
  vars:
    ipset_name: grafana_servers
    ipset_description: "Grafana servers allowed to scrape node stats"
    ipset_entries: "{{ groups.get('grafana_servers',[]) }}"
  tags:
    - prometheus
    - grafana
    - firewalld

- name: prometheus| firewalld | node exporter scrape rule
  firewalld:
    rich_rule: "rule source ipset='prometheus_servers' port port='9100' protocol='tcp'  audit limit value='15/m' accept"
    zone: public
    permanent: true
    state: enabled
  notify:
    - firewalld | policy | reload
  tags:
    - prometheus
    - node_exporter
    - firewalld

- name: prometheus| firewalld | haproxy exporter scrape rule
  firewalld:
    rich_rule: "rule source ipset='prometheus_servers' port port='9091' protocol='tcp'  audit limit value='15/m' accept"
    zone: public
    permanent: true
    state: enabled
  when: "prometheus_haproxy_exporter"
  notify:
    - firewalld | policy | reload
  tags:
    - prometheus
    - haproxy_exporter
    - firewalld


- name: prometheus | firewalld | alertmanager push rule
  firewalld:
    rich_rule: "rule source ipset='prometheus_servers' port port='9093' protocol='tcp'  audit limit value='15/m' accept"
    zone: public
    permanent: true
    state: enabled
  notify:
    - firewalld | service | restart
    - firewalld | policy | reload
  tags:
    - prometheus
    - alertmanager
    - firewalld


- name: prometheus | firewalld | alertmanager mesh rule
  firewalld:
    rich_rule: "rule source ipset='prometheus_alertmanagers' port port='6783' protocol='tcp'  audit limit value='15/m' accept"
    zone: public
    permanent: true
    state: enabled
  when: "prometheus_alertmanager"
  notify:
    - firewalld | service | restart
    - firewalld | policy | reload
  tags:
    - prometheus
    - alertmanager
    - firewalld



# TODO: Define an alertmanager client ipset?

- name: prometheus| firewalld | alertmanager
  firewalld:
    port: "{{ item }}"
    state: enabled
    permanent: yes
    immediate: yes
  when: "not skip_firewalld and prometheus_alertmanager"
  with_items:
    - "9093/tcp"
  tags:
    - prometheus
    - alertmanager
    - firewall


- name: prometheus | firewalld | grafana access rules
  firewalld:
    rich_rule: "rule source ipset='grafana_servers' port port='9090' protocol='tcp'  audit limit value='60/m' accept"
    zone: public
    permanent: true
    state: enabled
  when: "prometheus_server"
  notify:
    - firewalld | service | restart
    - firewalld | policy | reload
  tags:
    - prometheus
    - grafana
    - firewalld
